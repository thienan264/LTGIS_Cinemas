// layerControl.js
import { map } from './mapCore.js';
import { fetchData } from './mapUtils.js';
import { layersButton, arrayLayers } from './mapConfig.js';
// Import h√†m t·ª´ nearestCinema.js (c·∫ßn ƒë·∫£m b·∫£o file ƒë√≥ ƒë√£ load)
// import { showNearestCinema, clearNearestCinema } from './nearestCinema.js';

// Bi·∫øn c·ª•c b·ªô cho control layer
let _layerControl = null;

// H√†m generateButton g·ªëc
function generateButton(name) {
    const id = name === layersButton ? "all-layers" : name;
    const container = document.getElementById("layer-list"); // C·∫ßn ƒë·∫£m b·∫£o container t·ªìn t·∫°i khi g·ªçi

    if (!container) {
        console.error("Layer list container not found for button:", name);
        return;
    }

    const templateLayer = `
    <li class="layer-element" style="margin-bottom: 5px;">
      <label for="${id}">
        <input type="checkbox" id="${id}" name="item" class="item" value="${name}">
        <span>${name}</span>
      </label>
    </li>
  `;

    container.insertAdjacentHTML("beforeend", templateLayer);

    const checkbox = document.querySelector(`#${id}`);
    checkbox.addEventListener("change", (e) => {
        showHideLayer(e.target); // G·ªçi h√†m showHideLayer tr·ª±c ti·∫øp
    });
}

// H√†m checkedType 
function checkedType(id, type) {
    // Truy c·∫≠p h√†m t·ª´ global scope (window)
    const showNearest = window.showNearestCinema;
    const clearNearest = window.clearNearestCinema;

    if (id === "nearest") { // Gi·ªØ nguy√™n t√™n "nearest"
        if (type) {
            if (showNearest) showNearest(); else console.error("showNearestCinema not found");
        } else {
            if (clearNearest) clearNearest(); else console.error("clearNearestCinema not found");
        }
        return;
    }

    // Gi·ªØ nguy√™n c√°ch truy c·∫≠p layer qua window[ ]
    const layer = window["layer_" + id];
    if (!layer) {
        console.warn("Layer not found in window:", "layer_" + id);
        return;
    }

    if (type) { // Khi checkbox ƒë∆∞·ª£c check (hi·ªÉn th·ªã layer)
        // Ch·ªâ th√™m layer v√† fitBounds n·∫øu layer ch∆∞a c√≥ tr√™n map
        if (!map.hasLayer(layer)) {
            map.addLayer(layer);
            console.log(`Layer ${id} added to map.`);

            // *** TH√äM T√çNH NƒÇNG FITBOUNDS ***
            // Ki·ªÉm tra xem layer c√≥ ph∆∞∆°ng th·ª©c getBounds v√† bounds c√≥ h·ª£p l·ªá kh√¥ng
            if (layer.getBounds && typeof layer.getBounds === 'function' && layer.getBounds().isValid()) {
                console.log(`Fitting bounds for layer ${id}`);
                // S·ª≠ d·ª•ng fitBounds ƒë·ªÉ zoom v√† pan t·ªõi khu v·ª±c ch·ª©a layer
                // padding gi√∫p t·∫°o kho·∫£ng ƒë·ªám xung quanh c√°c ƒëi·ªÉm
                map.fitBounds(layer.getBounds(), { padding: [50, 50] });
            } else {
                // C√≥ th·ªÉ layer ch∆∞a c√≥ d·ªØ li·ªáu ho·∫∑c kh√¥ng ph·∫£i l√† feature group
                console.log(`Layer ${id} has no valid bounds to fit.`);
                // Optional: N·∫øu kh√¥ng c√≥ bounds, c√≥ th·ªÉ zoom v·ªÅ 1 ƒëi·ªÉm n·∫øu l√† marker ƒë∆°n l·∫ª
                // if (layer instanceof L.Marker) { map.setView(layer.getLatLng(), 15); }
            }
        } else {
            console.log(`Layer ${id} is already on the map.`);
            // N·∫øu layer ƒë√£ c√≥ tr√™n map, c√≥ th·ªÉ c√¢n nh·∫Øc v·∫´n fitBounds n·∫øu mu·ªën
            // if (layer.getBounds && layer.getBounds().isValid()) {
            //     map.fitBounds(layer.getBounds(), { padding: [50, 50] });
            // }
        }
    } else { // Khi checkbox kh√¥ng ƒë∆∞·ª£c check (·∫©n layer)
        if (map.hasLayer(layer)) {
            map.removeLayer(layer);
            console.log(`Layer ${id} removed from map.`);
        }
    }
}

// H√†m showHideLayer 
function showHideLayer(target) {
    const id = target.id;
    const layerNameValue = target.value; // L·∫•y value ƒë·ªÉ check 'all layers'

    if (layerNameValue === layersButton) { // So s√°nh v·ªõi value g·ªëc 'all layers'
        // C·∫ßn ƒë·∫£m b·∫£o arrayLayers ch·ª©a t√™n c√°c layer th·ª±c t·∫ø (vd: "cinema")
        const actualLayers = arrayLayers.filter(name => name !== 'nearest');
        actualLayers.forEach((layerName) => {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i checkbox c·ªßa layer con
            const childCheckbox = document.getElementById(layerName);
            if (childCheckbox && childCheckbox.checked !== target.checked) {
                childCheckbox.checked = target.checked;
                // G·ªçi checkedType cho layer con
                checkedType(layerName, target.checked);
            } else if (!childCheckbox) {
                // N·∫øu checkbox con kh√¥ng t·ªìn t·∫°i, v·∫´n th·ª≠ g·ªçi checkedType
                checkedType(layerName, target.checked);
            }
        });
        // N·∫øu b·ªè check "all layers", c≈©ng b·ªè check "nearest"
        if (!target.checked) {
            const nearestCheckbox = document.getElementById('nearest');
            if (nearestCheckbox && nearestCheckbox.checked) {
                nearestCheckbox.checked = false;
                checkedType('nearest', false); // G·ªçi ƒë·ªÉ clear nearest
            }
        }
    } else {
        // X·ª≠ l√Ω checkbox layer ƒë∆°n l·∫ª ho·∫∑c "nearest"
        checkedType(id, target.checked); // D√πng id c·ªßa checkbox (vd: "cinema" ho·∫∑c "nearest")

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i checkbox "all layers"
        updateAllLayersCheckbox();
    }
}

// H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i checkbox "all layers" (th√™m m·ªõi ƒë·ªÉ logic ho·∫°t ƒë·ªông ƒë√∫ng)
function updateAllLayersCheckbox() {
    const allLayersCheckbox = document.getElementById('all-layers');
    if (!allLayersCheckbox) return;

    const actualLayers = arrayLayers.filter(name => name !== 'nearest');
    let allChecked = true;
    let noneChecked = true;

    actualLayers.forEach(layerName => {
        const checkbox = document.getElementById(layerName);
        if (checkbox) { // Ch·ªâ x√©t nh·ªØng checkbox t·ªìn t·∫°i
            if (checkbox.checked) {
                noneChecked = false;
            } else {
                allChecked = false;
            }
        } else {
            allChecked = false; // N·∫øu checkbox kh√¥ng c√≥, coi nh∆∞ kh√¥ng ƒë∆∞·ª£c check
        }
    });

    if (allChecked) {
        allLayersCheckbox.checked = true;
        allLayersCheckbox.indeterminate = false;
    } else if (noneChecked) {
        allLayersCheckbox.checked = false;
        allLayersCheckbox.indeterminate = false;
    } else {
        // C√≥ check, c√≥ kh√¥ng check -> indeterminate
        allLayersCheckbox.checked = false; // B·ªè check nh∆∞ng hi·ªÉn th·ªã l√† indeterminate
        allLayersCheckbox.indeterminate = true;
    }
}


// H√†m kh·ªüi t·∫°o control (g·ªçi t·ª´ main.js)
export function initializeLayerControl() {
    _layerControl = L.control({ position: 'topright' }); // G√°n v√†o bi·∫øn c·ª•c b·ªô
    _layerControl.onAdd = function () {
        const div = L.DomUtil.create('div', 'leaflet-bar leaflet-control custom-layer-control');
        // Gi·ªØ nguy√™n innerHTML g·ªëc
        div.innerHTML = `
      <a href="#" title="L·ªõp hi·ªÉn th·ªã" style="font-size: 18px;">üóÇÔ∏è</a>
      <div class="layer-dropdown" style="display:none; background:white; padding: 5px; border-radius: 4px; margin-top: 5px;">
        <ul id="layer-list" style="list-style: none; padding: 0; margin: 0;"></ul>
      </div>
    `;
        // Gi·ªØ nguy√™n onclick g·ªëc
        div.onclick = function (e) {
            e.stopPropagation();
            const dropdown = div.querySelector('.layer-dropdown');
            dropdown.style.display = dropdown.style.display === 'none' ? 'block' : 'none';
        };
        L.DomEvent.disableClickPropagation(div);

        // T·∫°o c√°c button b√™n trong div n√†y sau khi n√≥ ƒë∆∞·ª£c t·∫°o
        // C·∫ßn ƒë·∫£m b·∫£o div ƒë√£ ƒë∆∞·ª£c th√™m v√†o DOM ho·∫∑c ch·ªù ch√∫t
        setTimeout(() => {
            generateButton(layersButton); // T·∫°o n√∫t "all layers"
            // L·∫•y geojsonOpts t·ª´ window
            const currentGeojsonOpts = window.geojsonOpts;
            arrayLayers.forEach((layerName) => {
                generateButton(layerName); // T·∫°o n√∫t cho t·ª´ng layer

                if (layerName !== "nearest") {
                    fetchData(`/maps/api/geojson/${layerName}/`).then((data) => {
                        if (!data) return;
                        // Gi·ªØ nguy√™n c√°ch t·∫°o layer v√† g√°n v√†o window g·ªëc
                        const layer = L.geoJSON(data, currentGeojsonOpts); //.addTo(map); // B·ªè addTo(map) ban ƒë·∫ßu
                        window["layer_" + layerName] = layer; // G√°n v√†o global scope
                        console.log(`Layer ${layerName} loaded and assigned to window.`);
                        // Ki·ªÉm tra v√† th√™m layer v√†o map n·∫øu checkbox t∆∞∆°ng ·ª©ng ƒë√£ ƒë∆∞·ª£c check s·∫µn
                        const checkbox = document.getElementById(layerName);
                        if (checkbox && checkbox.checked) {
                            map.addLayer(layer);
                        }
                    });
                }
            });
            updateAllLayersCheckbox(); // C·∫≠p nh·∫≠t tr·∫°ng th√°i ban ƒë·∫ßu c·ªßa checkbox "all"
        }, 0); // setTimeout 0 ƒë·ªÉ ch·ªù DOM c·∫≠p nh·∫≠t nh·∫π


        return div;
    };
    _layerControl.addTo(map);

    // Gi·ªØ nguy√™n global click listener g·ªëc
    document.addEventListener("click", function () {
        const dropdown = document.querySelector(".layer-dropdown");
        // Ki·ªÉm tra dropdown c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi ·∫©n
        if (dropdown && dropdown.style.display !== 'none') {
            dropdown.style.display = "none";
        }
    });

    console.log("Layer control initialized.");
}