/* eslint-disable no-undef */
/**
 * control layers outside the map
 */

// config map
let config = {
  minZoom: 7,
  maxZoom: 18,
  fullscreenControl: true
};
// magnification with which the map will start
const zoom = 18;
// co-ordinates
const lat = 10.8231;
const lng = 106.6297;

// calling map
const map = L.map("map", config).setView([lat, lng], zoom);

// Used to load and display tile layers on the map
// Most tile servers require attribution, which you can set under `Layer`
L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
  attribution:
    '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
}).addTo(map);

// T·∫°o bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ marker v·ªã tr√≠ c·ªßa ng∆∞·ªùi d√πng
let userLocationMarker;
let userLocationCircle;

// Th√™m n√∫t hi·ªÉn th·ªã v·ªã tr√≠ ng∆∞·ªùi d√πng
const locationButton = L.control({ position: 'topleft' });
locationButton.onAdd = function () {
  const div = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
  div.innerHTML = '<a href="#" title="Hi·ªÉn th·ªã v·ªã tr√≠ c·ªßa t√¥i" style="font-size: 18px;">üìç</a>';
  div.style.background = 'white';
  div.style.cursor = 'pointer';

  div.onclick = function () {
    getCurrentLocation();
    return false;
  };

  return div;
};
locationButton.addTo(map);

// H√†m l·∫•y v·ªã tr√≠ hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
function getCurrentLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      // Th√†nh c√¥ng
      function (position) {
        const userLat = position.coords.latitude;
        const userLng = position.coords.longitude;
        const accuracy = position.coords.accuracy;

        // X√≥a marker v√† circle c≈© n·∫øu ƒë√£ t·ªìn t·∫°i
        if (userLocationMarker) {
          map.removeLayer(userLocationMarker);
        }
        if (userLocationCircle) {
          map.removeLayer(userLocationCircle);
        }

        // T·∫°o marker v·ªã tr√≠ ng∆∞·ªùi d√πng
        userLocationMarker = L.marker([userLat, userLng], {
          icon: L.divIcon({
            className: 'user-location',  // Th√™m l·ªõp CSS ƒë·ªÉ t·∫°o ki·ªÉu
            html: "<span class='emoji'>üìç</span>",  // Bi·ªÉu t∆∞·ª£ng v·ªã tr√≠ ng∆∞·ªùi d√πng
            iconSize: [40, 40],  // ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc t·ªïng th·ªÉ c·ªßa icon
            iconAnchor: [20, 20],  // CƒÉn gi·ªØa icon (x,y v·ªã tr√≠ gi·ªØa c·ªßa icon)
            popupAnchor: [0, -25],  // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ popup
          })
        }).addTo(map)
          .bindPopup('V·ªã tr√≠ c·ªßa b·∫°n')
          .openPopup();

        // T·∫°o circle hi·ªÉn th·ªã ƒë·ªô ch√≠nh x√°c
        userLocationCircle = L.circle([userLat, userLng], {
          radius: accuracy,
          color: '#4285F4',
          fillColor: '#4285F4',
          fillOpacity: 0.15
        }).addTo(map);

        // Di chuy·ªÉn map ƒë·∫øn v·ªã tr√≠ ng∆∞·ªùi d√πng
        map.setView([userLat, userLng], zoom);
      },
      // L·ªói
      function (error) {
        let errorMessage;
        switch (error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = 'Ng∆∞·ªùi d√πng ƒë√£ t·ª´ ch·ªëi y√™u c·∫ßu truy c·∫≠p v·ªã tr√≠.';
            break;
          case error.POSITION_UNAVAILABLE:
            errorMessage = 'Th√¥ng tin v·ªã tr√≠ kh√¥ng c√≥ s·∫µn.';
            break;
          case error.TIMEOUT:
            errorMessage = 'Y√™u c·∫ßu l·∫•y v·ªã tr√≠ ng∆∞·ªùi d√πng ƒë√£ h·∫øt th·ªùi gian.';
            break;
          case error.UNKNOWN_ERROR:
            errorMessage = 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.';
            break;
        }
        alert(errorMessage);
      },
      // T√πy ch·ªçn
      {
        enableHighAccuracy: true,
        timeout: 5000,
        maximumAge: 0
      }
    );
  } else {
    alert('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã.');
  }
}

// ------------------------------------------------------------

// async function to load geojson
// Fetch d·ªØ li·ªáu GeoJSON t·ª´ API (l·∫•y t·ª´ database qua Django)
async function fetchData(url) {
  try {
    const response = await fetch(url);
    const data = await response.json();
    return data;
  } catch (err) {
    console.error("L·ªói khi fetch d·ªØ li·ªáu:", err);
  }
}

// Nh√≥m layer hi·ªÉn th·ªã c√°c POI
const poiLayers = L.layerGroup().addTo(map);

// Khi nh·∫•n v√†o marker -> zoom v√†o
function clickZoom(e) {
  map.setView(e.target.getLatLng(), zoom);
}

const layersContainer = document.querySelector(".layers");
const layersButton = "all layers";
const arrayLayers = ["cinema"]; // danh s√°ch layer

// T·∫°o checkbox cho t·ª´ng l·ªõp
function generateButton(name) {
  const id = name === layersButton ? "all-layers" : name;

  const templateLayer = `
    <li class="layer-element">
      <label for="${id}">
        <input type="checkbox" id="${id}" name="item" class="item" value="${name}" checked>
        <span>${name}</span>
      </label>
    </li>
  `;

  layersContainer.insertAdjacentHTML("beforeend", templateLayer);

  const checkbox = document.querySelector(`#${id}`);
  checkbox.addEventListener("change", (e) => {
    showHideLayer(e.target);
  });
}

generateButton(layersButton);

// T·∫£i d·ªØ li·ªáu t·ª´ Django API
arrayLayers.map((cinema) => {
  generateButton(cinema);

  // ‚úÖ ƒê∆∞·ªùng d·∫´n ƒë√∫ng theo Django URL patterns
  fetchData(`/maps/api/geojson/${cinema}/`)
    .then((data) => {
      if (!data) return; // ki·ªÉm tra c√≥ d·ªØ li·ªáu kh√¥ng
      const layer = L.geoJSON(data, geojsonOpts).addTo(map);
      window["layer_" + cinema] = layer;
    });
});

// X·ª≠ l√Ω khi checkbox ƒë∆∞·ª£c nh·∫•n
document.addEventListener("click", (e) => {
  const target = e.target;
  const itemInput = target.closest(".item");
  if (!itemInput) return;
  showHideLayer(target);
});

function showHideLayer(target) {
  const id = target.id;

  if (id === "all-layers") {
    arrayLayers.forEach((layerName) => {
      checkedType(layerName, target.checked);
    });
  } else {
    checkedType(id, target.checked);
  }

  const checkedBoxes = document.querySelectorAll("input[name=item]:checked");
  document.querySelector("#all-layers").checked =
    checkedBoxes.length === arrayLayers.length;
}

function checkedType(id, type) {
  const layer = window["layer_" + id];
  if (!layer) {
    console.warn(`Layer "${id}" ch∆∞a load xong!`);
    return;
  }

  if (type) {
    map.addLayer(layer);
    map.fitBounds(layer.getBounds(), { padding: [50, 50] });
  } else {
    map.removeLayer(layer);
  }

  document.querySelector(`#${id}`).checked = type;
}


// Th√™m th∆∞ vi·ªán Leaflet Routing Machine n·∫øu ch∆∞a c√≥
// < link rel = "stylesheet" href = "https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
//   <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>
let routingControl; // Bi·∫øn l∆∞u tuy·∫øn ƒë∆∞·ªùng
// H√†m ch·ªâ ƒë∆∞·ªùng t·ª´ v·ªã tr√≠ hi·ªán t·∫°i ƒë·∫øn m·ªôt ƒëi·ªÉm ƒë√≠ch (r·∫°p chi·∫øu phim)
function routeToDestination(destination) {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      function (position) {
        const userLat = position.coords.latitude;
        const userLng = position.coords.longitude;
        // X√≥a tuy·∫øn ƒë∆∞·ªùng c≈© n·∫øu c√≥
        if (routingControl) {
          map.removeControl(routingControl);
        }
        //T·∫°o tuy·∫øn ƒë∆∞·ªùng m·ªõi
        routingControl = L.Routing.control({
          waypoints: [L.latLng(userLat, userLng), destination], // T·ª´ v·ªã tr√≠ ng∆∞·ªùi d√πng ƒë·∫øn r·∫°p
          routeWhileDragging: true,
          createMarker: function () { return null; }, // Kh√¥ng hi·ªÉn th·ªã marker m·∫∑c ƒë·ªãnh
        }).addTo(map);
      },
      function () {
        alert("Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ c·ªßa b·∫°n!");
      },
      { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
    );
  } else {
    alert("Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã.");
  }
}

// C·∫≠p nh·∫≠t s·ª± ki·ªán click tr√™n r·∫°p chi·∫øu phim
geojsonOpts = {
  pointToLayer: function (feature, latlng) {
    return L.marker(latlng, {
      icon: L.divIcon({
        className: "cinema-icon",
        html: "<span class='emoji'>üé•</span>",
        iconSize: [40, 40],
        iconAnchor: [20, 20],
        popupAnchor: [0, -25],
      }),
    }).bindPopup(function () {
      let lichChieu = feature.properties.lich_chieu || [];

      let dropdownHtml = "<em>Ch∆∞a c√≥ l·ªãch chi·∫øu</em>";
      if (lichChieu.length > 0) {
        dropdownHtml = `
          <label for="movie-select-${feature.id}"><b>Danh s√°ch phim:</b></label><br>
          <select id="movie-select-${feature.id}" onchange="handleMovieSelect(event, '${feature.id}')">
            <option value="">-- Phim ƒëang chi·∫øu --</option>
            ${lichChieu.map((item, index) =>
          `<option value="${index}">
                ${item.ten_phim} (${item.gio_chieu})
              </option>`
        ).join("")}
          </select>
          <div id="movie-detail-${feature.id}" style="margin-top: 10px; font-size: 0.9em;"></div>
        `;
      }

      return `
        üé• <b>R·∫°p chi·∫øu phim</b><br>
        <b>${feature.properties.name}</b><br>
        <em>${feature.properties.address}</em><br>
        <p>${feature.properties.description || ''}</p>
        ${dropdownHtml}
        <br><br>
        <button onclick="routeToDestination([${latlng.lat}, ${latlng.lng}])">Ch·ªâ ƒë∆∞·ªùng</button>
      `;
    }).on("click", function () {
      map.setView(latlng, zoom);
    });
  },
};

// X·ª≠ l√Ω dropdown ch·ªçn phim

function handleMovieSelect(event, featureId) {
  const index = event.target.value;
  const detailDiv = document.getElementById(`movie-detail-${featureId}`);
  const feature = geojsonLayer.getLayer(featureId)?.feature;

  if (!feature || !feature.properties.lich_chieu || index === "") {
    detailDiv.innerHTML = "";
    return;
  }

  const item = feature.properties.lich_chieu[index];
  detailDiv.innerHTML = `
    <b>${item.ten_phim}</b><br>
    Th·ªÉ lo·∫°i: ${item.the_loai}<br>
    Th·ªùi l∆∞·ª£ng: ${item.thoi_luong} ph√∫t<br>
    üïí Gi·ªù chi·∫øu: ${item.gio_chieu}
  `;
}



